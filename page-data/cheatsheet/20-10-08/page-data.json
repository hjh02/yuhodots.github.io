{"componentChunkName":"component---src-templates-post-js","path":"/cheatsheet/20-10-08/","result":{"data":{"markdownRemark":{"html":"<p> 랩에서 머신러닝 워크스테이션으로 Ubuntu 18.04 OS를 사용하고 있는데, 서버 관리 및 작업 과정에서 자주 사용되는 커맨드를 아래에 글로 정리하는 중입니다. 새로 알게 되거나 공유하고 싶은 내용이 생길 때 마다 추가해나가고 있습니다.</p>\n<h3>프로그램 실행</h3>\n<h5>백그라운드, 데몬 실행</h5>\n<ul>\n<li><em><code class=\"language-text\">nohup 명령어 &amp;</code></em></li>\n<li>nohup의 의미: nohup은 끊지 말라는 뜻의 no hang up 의 약자이며 데몬 형태로 실행할 때 사용. 데몬으로 실행시 서버에서 로그아웃을 하여 세션이 종료되더라도 프로그램은 종료되지 않음</li>\n<li>&#x26;의 의미: 백그라운드에서 실행. 사용자에 눈에 보이지 않는 곳에서 실행하지만, 세션이 종료되면 프로그램도 종료</li>\n<li>실행중인 작업 확인: <em><code class=\"language-text\">jobs -l</code></em></li>\n</ul>\n<h5>표준 출력</h5>\n<ul>\n<li>파일의 출력로그는 기본적으로 해당 디렉토리의 nohup.out 파일에 쌓임</li>\n<li>전체 출력 확인: <em><code class=\"language-text\">cat nohup.out</code></em></li>\n<li>마지막 10줄만 확인: <em><code class=\"language-text\">tail -f nohup.out</code></em></li>\n<li>표준 출력을 실시간으로 쓰기 (파이썬): <em><code class=\"language-text\">nohup python -u 파일명.py &amp;</code></em></li>\n<li>기본적으로는 출력 내용이 바로 전송되는 것이 아니라 어느정도 버퍼에 쌓여야 전송이 되는데, 파이썬의 경우에는 -u 옵션 사용해서 출력을 개별적으로 전송이 가능. 그렇기에 이 옵션을 사용할 경우 출력을 바로 확인 가능</li>\n<li>표준출력을 nohup.out이 아닌 다른 파일에 쓰기: <em><code class=\"language-text\">nohup 명령어 &gt; 파일명.out &amp;</code></em></li>\n<li>표준출력과 표준에러를 서로 다른 파일에 쓰기: <em><code class=\"language-text\">nohup 명령어 1 &gt; 파일명_출력.out 2 &gt; 파일명_에러.err &amp;</code></em></li>\n</ul>\n<h5>프로세스</h5>\n<ul>\n<li>프로세스 ID 확인: <em><code class=\"language-text\">ps -ef | grep 파일명</code></em></li>\n<li>프로세스 종료: <em><code class=\"language-text\">kill -9 프로세스ID</code></em> (9 옵션은 강제종료, 15 옵션은 종료)</li>\n</ul>\n<h3>파일 관리</h3>\n<h5>기본 명령어</h5>\n<ul>\n<li>이전 디렉토리로 이동: <em><code class=\"language-text\">cd -</code></em></li>\n<li>홈 디렉토리로 이동: <em><code class=\"language-text\">cd</code></em> (혹은 <em><code class=\"language-text\">cd ~</code></em>)</li>\n<li>디렉토리 내 파일들 확인: <em><code class=\"language-text\">ls 폴더명</code></em> (아무 폴더도 입력 안할 시, 현재 위치 출력)</li>\n<li>ls 명령어에서 -a 옵션은 숨겨진 파일도 확인, -l 옵션은 자세히 보기</li>\n<li>파일, 디렉토리 이동: <em><code class=\"language-text\">mv 파일명 이동위치</code></em></li>\n<li>파일 이름 변경: <em><code class=\"language-text\">mv 파일명 변경후파일명</code></em></li>\n<li>파일 이름 일괄 변경: <em><code class=\"language-text\">rename 파일명 변경후파일명 변경대상</code></em></li>\n<li>파일 삭제: <em><code class=\"language-text\">rm 파일명</code></em> (-f 옵션은 강제삭제, * 사용시 파일 전체삭제)</li>\n<li>디렉토리 삭제: <em><code class=\"language-text\">rm -r 폴더명</code></em> (혹은 <em><code class=\"language-text\">rmdir</code></em>)</li>\n</ul>\n<h5>grep</h5>\n<ul>\n<li>폴더 내에서 해당 내용이 존재하는 파일 찾기: <em><code class=\"language-text\">grep 해당내용 해당폴더</code></em></li>\n<li>-h 옵션은 파일명 출력하지 않음, -o 옵션은 일치하는 부분만 출력, -l 옵션은 파일명만 출력</li>\n<li>더 많은 옵션은 하단 양햄찌가 만드는 세상님 블로그 글 참고</li>\n<li>grep 명령어는 정규표현식을 사용해서 유동적으로 활용이 가능</li>\n</ul>\n<h5>파일 압축 관련</h5>\n<ul>\n<li>tar 압축해제: <em><code class=\"language-text\">tar -xvf 파일명.tar</code></em></li>\n<li>tar로 압축하기: <em><code class=\"language-text\">tar -cvf 파일명.tar 폴더명</code></em></li>\n<li>tar.gz 압축해제: <em><code class=\"language-text\">tar -zxvf 파일명.tar</code></em></li>\n<li>tar.gz로 압축하기: <em><code class=\"language-text\">tar -zcvf 파일명.tar 폴더명</code></em></li>\n<li>gz 압축해제: <em><code class=\"language-text\">gzip -d 파일명.gz</code></em> </li>\n<li>gz로 압축하기: <em><code class=\"language-text\">gzip 파일명</code></em></li>\n<li>tar 옵션은 하단 nota's stroy님 블로그 글 참고 </li>\n</ul>\n<h5>SFTP (SSH File Transfer Protocol)</h5>\n<ul>\n<li>SFTP로 원격 서버 접속: <em><code class=\"language-text\">sftp 유저아이디@서버아이피</code></em></li>\n<li>파일 전송 작업을 하기 전에, 현재 로컬 컴퓨터의 위치를 미리 파악해두기</li>\n<li>로컬과 관련된 명령어는 알파벳 'l'을 붙임으로써 사용가능 (예를 들어 cd는 <em><code class=\"language-text\">lcd</code></em>, ls는 <em><code class=\"language-text\">lls</code></em>) </li>\n<li>서버로부터 파일 다운로드: <em><code class=\"language-text\">get 파일명</code></em> (여러 파일의 경우 <em><code class=\"language-text\">mget</code></em>)</li>\n<li>서버로 파일 업로드: <em>put 파일명</em> (여러 파일의 경우 mput)</li>\n</ul>\n<h3>계정 관리</h3>\n<ul>\n<li>전체 계정 확인: <em><code class=\"language-text\">cat /etc/passwd</code></em></li>\n<li>useradd로 등록된 계정 확인: <em><code class=\"language-text\">grep /bin/bash /etc/passwd</code></em></li>\n<li>sudo 권한을 가진 계정 확인: <em>`grep '^sudo:.\\</em>$' /etc/group | cut -d: -f4`*</li>\n<li>계정 생성: <em><code class=\"language-text\">sudo useradd -m -s /bin/bash 계정이름</code></em> (-m 옵션을 사용하면 홈 디렉토리도 자동 생성됨)</li>\n<li>생성된 계정 암호 설정: <em><code class=\"language-text\">sudo passwd 계정이름</code></em></li>\n<li>계정 삭제: <em><code class=\"language-text\">userdel 계정이름</code></em> (-r 옵션을 사용하면 홈 디렉토리도 삭제됨)</li>\n<li>현재 시스템에 로그인된 유저 확인: <em><code class=\"language-text\">w</code></em></li>\n</ul>\n<h3>그 외</h3>\n<ul>\n<li>명령어 앞에 sudo 붙이는 것을 잊었을 때: <em><code class=\"language-text\">sudo !!</code></em></li>\n<li>최근에 사용한 argument 재사용: <em><code class=\"language-text\">명령어 !$</code></em></li>\n<li>복사, 붙여넣기: Ctrl+Shift+C, Ctrl+Shift+V</li>\n<li>시스템 전체 정보 깔끔하게 출력: <em><code class=\"language-text\">screenfetch</code></em></li>\n</ul>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"http://joonyon.tistory.com/98\">Mr.Lin Blog - 쉽게 설명한 nohup 과 &#x26;(백그라운드) 명령어 사용</a> ('프로그램 실행' 파트)</li>\n<li><a href=\"https://jhnyang.tistory.com/67\">양햄찌가 만드는 세상 - 텍스트 필터 명령어1 (문자열 패턴 검색 grep 옵션, 정규표현식)</a> ('파일 관리' 파트)</li>\n<li><a href=\"https://nota.tistory.com/53\">nota's story - 리눅스 tar, gz 압축 및 해제</a> ('파일 관리' 파트)</li>\n<li><a href=\"https://medium.com/better-programming/15-essential-linux-command-line-tips-and-tricks-95e2bfa2890f\">15 Essential Linux Command Line Tips and Tricks</a> ('그 외' 파트)</li>\n</ul>","frontmatter":{"path":"/cheatsheet/20-10-08/","title":"Linux Command Cheat Sheet","category":"Cheat Sheet","date":"2020-10-08"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}