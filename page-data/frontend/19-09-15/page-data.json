{"componentChunkName":"component---src-templates-post-js","path":"/frontend/19-09-15/","result":{"data":{"markdownRemark":{"html":"<p>리액트의 컴포넌트는 우리가 모니터링하고 조작할수 있는 세 단계의 주요 라이프 사이클을 가지고 있습니다. 이번 포스팅에서는 리액트의 라이프사이클인 <strong>Mounting, Updating, Unmounting</strong>에 대해 공부해보도록 하겠습니다.</p>\n<p> 들어가기 앞서 기본적으로 알고있어야 하는 <strong>DOM</strong>에 대해 알아봅시다. DOM은 <strong>Document Object Model</strong>의 약자로 HTML, XML 문서의 프로그래밍 interface를 의미합니다. 그렇다고 해서 내가 작성한 html 코드가 DOM과 동일하다는 것을 의미하지는 않고, 브라우저의 개발자 툴에서 확인한 코드가 DOM이 됩니다. 웹 브라우저에 표출되는 내용은 html 코드 내용에서 자바스크립트와 같은 스크립팅 언어에 의해 변경될 수 있기 때문입니다. </p>\n<h3>Mounting</h3>\n<p> <strong>mount</strong>라는 단어는 컴퓨터공학 분야에서 '설치' 또는 '장착'이라는 뜻으로 많이 사용된다고 합니다. <a href=\"https://www.w3schools.com/react/react_lifecycle.asp\">w3school</a>에서는 mounting에 대해 'putting elements into the DOM' 즉, DOM에 요소를 삽입하는 것이라고 설명하고 있습니다. 쉽게 생각해서 React elements가 DOM에 노출되는 것, 혹은 더 쉽게 컴포넌트를 생성하는 것을 mounting이라고 생각하시면 될것 같습니다. React에는 아래와 같이 컴포넌트를 마운팅할 때 실행되는 4가지의 built-in 메소드가 있습니다.</p>\n<ul>\n<li>constructor()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n<li>getDerivedStateFromProps()</li>\n</ul>\n<p> 컴포넌트가 렌더되기 전에 호출되는 <code class=\"language-text\">componentWillMount()</code> 라는 메소드도 존재했으나 이제는 필요하지 않게 되어 v16.3 이후부터는 사용되지 않거나, 사용되더라도 <code class=\"language-text\">UNSAFE_componentWillMount()</code> 라는 이름으로 사용되니 참고만 하시길 바랍니다. 아래의 순서대로 실행되며 자세한 사용법은 <a href=\"https://www.w3schools.com/react/react_lifecycle.asp\">w3school</a>을 참고하시길 바랍니다.</p>\n<ol>\n<li>컴포넌트가 새로 만들어질 때마다 컴포넌트 생성자 함수 constructor()가 호출됩니다.</li>\n<li>render()가 호출됩니다.</li>\n<li>componentDidMount()가 호출됩니다.</li>\n</ol>\n<h3>Updating</h3>\n<p> 마운팅 이후에는 <strong>props 혹은 state의 변화</strong> 같은 컴포넌트의 업데이트가 진행될 수 있습니다. React에는 아래와 같이 컴포넌트가 업데이트 될 때 실행되는 5가지의 built-in 메소드가 있습니다.</p>\n<ul>\n<li>getDerivedStateFromProps(): props로 받아온 값을 state로 동기화 하는 경우 사용합니다.</li>\n<li>shouldComponentUpdate(): 리액트가 re-rendering을 해야하는 지에 대한 여부를 Boolean 값으로 리턴합니다.</li>\n<li>render()</li>\n<li>getSnapshotBeforeUpdate(): render 이후, 실제 DOM 변화 이전에 실행되는 메소드입니다. </li>\n<li>componentDidUpdate(): DOM 변화 이후에 실행되는 메소드입니다. </li>\n</ul>\n<p> <code class=\"language-text\">componentWillReceiveProps()</code> 라는 메소드는 v16.3 이후부터 <code class=\"language-text\">UNSAFE_componentWillReceiveProps()</code> 로 변경되었고, <code class=\"language-text\">getDerivedStateFromProps()</code> 의 경우에는 마운팅과 업데이팅 두 경우 모두에서 호출된다는 점을 참고하시길 바랍니다. 메소드는 아래의 순서로 실행되며 자세한 사용법은 <a href=\"https://www.w3schools.com/react/react_lifecycle.asp\">w3school</a>을 참고하시길 바랍니다.</p>\n<ol>\n<li>render()가 호출됩니다.</li>\n<li>getSnapshotBeforeUpdate()가 호출됩니다. </li>\n<li>DOM에 변화가 생깁니다.</li>\n<li>componentDidUpdate()가 호출됩니다. </li>\n</ol>\n<h3>Unmounting</h3>\n<p> 그 다음의 라이프사이클은 Unmounting입니다. 컴포넌트가 DOM에서 제거되거나 리액트로서 언마운트 될 때 호출되며, 오직 한 개의 built-in 메소드가 존재합니다.</p>\n<ul>\n<li>componentWillUnmount()</li>\n</ul>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"https://medium.com/@changmoomoon/react-v16-3-%EC%9D%B4%ED%9B%84-lifecycle-api-%EC%B4%9D-%EC%A0%95%EB%A6%AC-16-3v%EB%B6%80%ED%84%B0-deprecated%EB%90%9C-api%EB%8F%84-%ED%8F%AC%ED%95%A8-37456f843efd\">React v16.3 이후 lifecycle API 총 정리(16.3v부터 deprecated된 API도 포함)</a></li>\n<li><a href=\"https://www.w3schools.com/react/react_lifecycle.asp\">w3school.com - React Lifecycle</a></li>\n<li><a href=\"https://velopert.com/3631\">velopert - 누구든지 하는 리액트 5편: Lifecycle API</a></li>\n<li><a href=\"https://velog.io/@godori/DOM%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">velog.io/@godori/DOM이란 무엇인가?</a></li>\n</ul>","frontmatter":{"path":"/frontend/19-09-15/","title":"React Lifecycle","category":"FrontEnd","date":"2019-09-15"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}