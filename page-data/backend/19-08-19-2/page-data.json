{"componentChunkName":"component---src-templates-post-js","path":"/backend/19-08-19-2/","result":{"data":{"markdownRemark":{"html":"<p> node.js express를 사용하는 데에 있어서 가장 기본적인 것은 req객체, res객체, express()함수를 사용하는 것입니다. 하지만 매번 까먹곤 하는 내용이어서 <a href=\"https://expressjs.com/ko/4x/api.html#express\">Express 공식 홈페이지</a>를 참고하여 정리 해 보았습니다.</p>\n<h3 id=\"req-객체\" style=\"position:relative;\"><a href=\"#req-%EA%B0%9D%EC%B2%B4\" aria-label=\"req 객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>req 객체</h3>\n<ul>\n<li><strong>req.body :</strong> <strong>POST</strong> 정보를 가집니다. 파싱을 위해서 body-parser와 같은 패키지가 필요합니다. 요청 정보가 url에 들어있는 것이 아니라 Request의 본문에 들어있기 때문입니다. </li>\n<li><strong>req.query :</strong> <strong>GET</strong> 정보를 가집니다. 즉, url로 전송된 쿼리 스트링 파라미터를 담고 있습니다.</li>\n<li><strong>req.params :</strong> 내가 이름 붙인 라우트 파라미터 정보를 가집니다.</li>\n<li><strong>req.headers :</strong> HTTP의 Header 정보를 가집니다.</li>\n<li>이 외에도 req.route, req.cookies, req.acceptedLanguages, req.url, req.protocol, req.host, req.ip 등이 존재합니다. </li>\n</ul>\n<h3 id=\"res-객체\" style=\"position:relative;\"><a href=\"#res-%EA%B0%9D%EC%B2%B4\" aria-label=\"res 객체 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res 객체</h3>\n<ul>\n<li><strong>res.send :</strong> 다양한 유형의 응답을 전송합니다.</li>\n<li><strong>res.redirect :</strong> 브라우저를 리다이렉트 합니다. </li>\n<li><strong>res.render :</strong> 설정된 템플릿 엔진을 사용해서 views를 렌더링합니다.</li>\n<li><strong>res.json :</strong> JSON 응답을 전송합니다.</li>\n<li><strong>res.end :</strong> 응답 프로세스를 종료합니다.</li>\n<li>이 외에도 res.set, res.status, res.type, res.sendFile, res.links, res.cookie 등이 존재합니다. </li>\n</ul>\n<h3 id=\"ressend--resjson--resend-비교\" style=\"position:relative;\"><a href=\"#ressend--resjson--resend-%EB%B9%84%EA%B5%90\" aria-label=\"ressend  resjson  resend 비교 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res.send / res.json / res.end 비교</h3>\n<blockquote>\n<p>이 파트는 이 <a href=\"https://blog.fullstacktraining.com/res-json-vs-res-send-vs-res-end-in-express/\">자료</a>를 참고하였습니다.</p>\n</blockquote>\n<h4 id=\"ressend\" style=\"position:relative;\"><a href=\"#ressend\" aria-label=\"ressend permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res.send</h4>\n<p> res.send([body])의 body에는 Buffer, String, Object, Array가 올 수 있습니다. 그리고 response Header에는 Body의 <strong>Content-Type</strong>이 자동으로 정의됩니다. 아래의 예시를 살펴보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Minsu'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p> key는 name, value는 'Minsu'라는 object를 body에 넣어서 response 응답을 전달하면, response Header 내 Content-Type은 자동으로 json(JavaScript Object Notation)으로 정의됩니다. 참고로 이 response Header는 response 객체 내 <strong>set메소드</strong>로 제어가 가능합니다. 간단한 예로 res.set('Content-Type', 'text/html'); 같은 형태를 들 수 있습니다.</p>\n<h4 id=\"resjson\" style=\"position:relative;\"><a href=\"#resjson\" aria-label=\"resjson permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res.json</h4>\n<p> res.json은 JSON을 응답으로 보냅니다. 여기서 res.send도 Object를 응답으로 보낼 수 있으니까 res.json이 굳이 필요할까 라는 의문이 들 수 있는데, res.json은 JSON 정보를 전달하는데 더 특화된 기능을 가지고 있습니다. 일단 이를 이해하기 위해서는 Object와 JSON은 비슷하게 생기긴 했지만 확연한 차이점을 가지고 있다는 점을 알고계셔야 합니다. </p>\n<p>  JSON은 String, Number, Object, Array, Boolean, Null을 지원하지만, Function, Date, Undefined 등과 같은 타입은 지원하지 않습니다. 그렇기 때문에 우리가 { x: [10, undefined, function(){}, Symbol('')] } 같은 파라미터를 입력하면 undefined, function(){}, Symbol(\") 는 JSON이 지원하지 않는 타입이기에 JSON이 지원하는 타입으로 바꾸는 작업이 요구됩니다. 이는 <strong>JSON.stringfy() 메소드</strong>를 통해 구현할 수 있습니다. </p>\n<p> res.json을 사용하면 JSON.stringfy() 메소드를 호출하여 파라미터를 JSON string 형태로 먼저 변환 한 뒤, res.send()를 호출하여 응답을 내보냅니다. JSON.stringfy() 메소드는 replacer와 spaces라는 두 가지 파라미터를 가질 수 있는데 이를 Express에서는 아래와 같은 옵션을 통해 제어 가능합니다. (JSON.stringfy()에 대한 설명은 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">Mozilla</a>에서 참고하시길 바랍니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json replacer'</span><span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json spaces'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"resend\" style=\"position:relative;\"><a href=\"#resend\" aria-label=\"resend permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>res.end</h4>\n<p> res.end는 위에서 언급한 것 처럼 응답 프로세스를 종료하는 데 사용됩니다. 그렇다면 res.end()를 굳이 코드 내 명시해줘야 할까요? 이에 대한 대답은 '맞다'가 될 수도 있고 '아니다'가 될 수도 있습니다. 데이터를 제공하지 않고 응답을 끝내려면 res.end()를 사용할 수 있습니다. 예를 들어 아래와 같이 404오류 페이지에 활용 될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 하지만 응답 데이터를 res.json이나 res.send 같은 형태로 전송하는 경우에는 이들이 일부 데이터를 보낸 뒤에 자동으로 응답 종료처리를 하기 때문에 굳이 res.end()를 호출 할 필요가 없습니다. </p>\n<h3 id=\"express-함수\" style=\"position:relative;\"><a href=\"#express-%ED%95%A8%EC%88%98\" aria-label=\"express 함수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>express() 함수</h3>\n<ul>\n<li><strong>express.json()</strong> : 들어오는 request를 JSON 데이터로 파싱하며, body-parser를 기반으로 합니다.</li>\n<li><strong>express.static()</strong> : 정적 파일을 제공하며, serve-static를 기반으로 합니다. </li>\n<li><strong>express.Router()</strong> : 새 router 객체를 생성합니다. </li>\n<li><strong>express.urlencoded()</strong> : 들어오는 request를 urlencoded 데이터로 파싱하며, body-parser를 기반으로 합니다.</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#req-%EA%B0%9D%EC%B2%B4\">req 객체</a></li>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#res-%EA%B0%9D%EC%B2%B4\">res 객체</a></li>\n<li>\n<p><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#ressend--resjson--resend-%EB%B9%84%EA%B5%90\">res.send / res.json / res.end 비교</a></p>\n<ul>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#ressend\">res.send</a></li>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#resjson\">res.json</a></li>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#resend\">res.end</a></li>\n</ul>\n</li>\n<li><a href=\"/Web/19-08-19-req%20%EA%B0%9D%EC%B2%B4%EC%99%80%20res%20%EA%B0%9D%EC%B2%B4,%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20res.send%EC%99%80%20res.json%EC%9D%98%20%EB%B9%84%EA%B5%90/#express-%ED%95%A8%EC%88%98\">express() 함수</a></li>\n</ul>","frontmatter":{"path":"/backend/19-08-19-2/","title":"req 객체와 res 객체, 그리고 res.send와 res.json의 비교","category":"BackEnd","date":"2019-08-19"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}