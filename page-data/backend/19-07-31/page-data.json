{"componentChunkName":"component---src-templates-post-js","path":"/backend/19-07-31/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>소스코드를 생활코딩 <a href=\"https://opentutorials.org/course/2136/12257\">강좌</a>에서 참조하였습니다.</p>\n</blockquote>\n<p>저는 로그인, 회원가입, 인증 기능을 구현하기 위해 express-session, passport.js (local strategy)를 사용하고 있습니다. 이를 위해서는 session store를 만들어야 하고 그래서 mysql을 session store로서 사용하려 합니다. 그렇다면 mysql을 session store로 사용하기 위해서는 어떻게 해야 할까요?</p>\n<h3 id=\"필요한-모듈\" style=\"position:relative;\"><a href=\"#%ED%95%84%EC%9A%94%ED%95%9C-%EB%AA%A8%EB%93%88\" aria-label=\"필요한 모듈 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필요한 모듈</h3>\n<p> 자 일단 express-session와 passport-local을 사용하기 위해 모듈을 로드 해 줍시다. <code class=\"language-text\">npm install express-session --save</code>, <code class=\"language-text\">npm install passport --save</code>, <code class=\"language-text\">npm install passport-local --save</code>를 통해 미리 모듈들을 설치 해 주는 것도 잊으시면 안됩니다. 아래와 같이 express-session을 사용하면 request 객체에 session이라는 값이 추가됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-session'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> MySQLStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-mysql-session'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> passport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> LocalStrategy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport-local'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Strategy<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  secret<span class=\"token operator\">:</span> <span class=\"token string\">'1234DSFs@adf1234!@#$asd'</span><span class=\"token punctuation\">,</span>\n  resave<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  saveUninitialized<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n\tstore<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySQLStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    \thost<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    \tuser<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    \tpassword <span class=\"token operator\">:</span><span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span>\n    \tdatabase <span class=\"token operator\">:</span> <span class=\"token string\">'example'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>passport<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// passport 사용 하도록 세팅</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>passport<span class=\"token punctuation\">.</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// passport 사용 시 session을 활용</span></code></pre></div>\n<p> 비밀번호를 암호화 하기 위한 hasher 모듈 또한 로드 해 줍니다. 저는 <a href=\"https://www.npmjs.com/package/pbkdf2-password\">pbkdf2-password</a> 방식을 사용하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> bkfd2Password <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pbkdf2-password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hasher <span class=\"token operator\">=</span> <span class=\"token function\">bkfd2Password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"회원가입-파트\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8C%8C%ED%8A%B8\" aria-label=\"회원가입 파트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 파트</h3>\n<p> 회원 가입 이후, 가입한 회원의 정보가 mysql 테이블에 저장되기 위해서는 미리 <strong>users</strong>라는 테이블을 만들어 놓아야 합니다. 이 방법에 대해서는 <a href=\"https://uhou.tistory.com/107?category=835403\">이전 포스팅</a>을 참고하시면 좋을 것 같습니다.</p>\n<p>데이터베이스 테이블 까지 만들었다면 기본적인 세팅은 완료되었습니다. 그러면 이제 회원가입 form과, form에 입력한 정보를 post방식으로 받는 라우터 코드를 아래에 작성 해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">h1 Login<span class=\"token operator\">:</span> register\n<span class=\"token function\">form</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">=</span><span class=\"token string\">\"/login/register\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">)</span>\np\n  <span class=\"token function\">input</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span>\np\n  <span class=\"token function\">input</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\np\n  <span class=\"token function\">input</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login/register'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hasher</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> pass<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        authId<span class=\"token operator\">:</span> <span class=\"token string\">'local:'</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        username<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> hash<span class=\"token punctuation\">,</span>\n        salt<span class=\"token operator\">:</span> salt\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'INSERT INTO users SET ?'</span><span class=\"token punctuation\">,</span>\n        user<span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n          res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 이렇게 생성된 form에 정보를 입력하면 우리의 MySQL에 잘 저장되는 것을 확인 할 수 있습니다.</p>\n<h3 id=\"로그인-파트\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8C%8C%ED%8A%B8\" aria-label=\"로그인 파트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 파트</h3>\n<p> 일단 아래와 같이 login정보를 받는 라우터 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n  passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'local'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      successRedirect<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      failureRedirect<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n      failureFlash<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 이제는 mysql에 저장된 회원 정보와 로그인 form 정보를 비교하여 사용자가 올바른 사용자인지 구별하는 코드를 구현 해 봅시다. 이를 위해서 passport의 LocalStrategy와 관련된 코드를 아래처럼 작성하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">passport<span class=\"token punctuation\">.</span><span class=\"token function\">serializeUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 로그인 성공 시 콜백 함수 호출</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[SerializeUser]'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>authId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 접속한 사용자의 식별 값이, session store에 user.authId로 저장</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npassport<span class=\"token punctuation\">.</span><span class=\"token function\">deserializeUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">authId<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 로그인 성공한 사용자가 웹 페이지 이동할 때 마다 콜백 함수 호출</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[DeserializeUser]'</span><span class=\"token punctuation\">,</span> authId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// authId 인자에는 serializeUser 메소드에서 보낸 user.authId 값이 담김</span>\n  db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'SELECT * FROM users WHERE authId=?'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>authId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npassport<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalStrategy</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// Local 저장 방식을 통한 인증 구현</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'SELECT * FROM users WHERE authId=?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">'local:'</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 입력한 유저정보가 mysql 내 존재하지 않는 경우 1</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 입력한 유저정보가 mysql 내 존재하지 않는 경우 2</span>\n        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 적절한 유저정보가 존재하는 경우</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">hasher</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> password<span class=\"token punctuation\">,</span> salt<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>salt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> pass<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">===</span> user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 사용자의 비밀번호가 올바른지 확인</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LocalStrategy'</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// user 라는 값을 passport.serializeUser의 첫번째 인자로 전송</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 첫 번째 코드블럭은 serialization, deserialization 관련 코드입니다. 두 번째 코드블럭이 실질적으로 유저를 판단하는 소스코드입니다. 코드가 복잡하니 순서대로 나눠서 설명하겠습니다.</p>\n<h5 id=\"passportuse-파트\" style=\"position:relative;\"><a href=\"#passportuse-%ED%8C%8C%ED%8A%B8\" aria-label=\"passportuse 파트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>passport.use 파트</h5>\n<ol>\n<li>mysql 내에 적절한 유저정보가 존재하는 경우 <code class=\"language-text\">if(err) return done(&#39;There is no user.&#39;)</code> 문장을 실행시키지 않고 넘어갑니다.</li>\n<li>mysql 내 저장되어 있는 비밀번호가 입력한 비밀번호와 일치하는 경우 <code class=\"language-text\">if(hash === user.password) {...}</code> 을 실행시킵니다.</li>\n<li>유저의 정보를 <code class=\"language-text\">passport.serpassport.serializeUser</code> 메소드의 첫번째 인자로 전송하고 로그인을 완료합니다.</li>\n</ol>\n<h5 id=\"passportserializeuser-파트\" style=\"position:relative;\"><a href=\"#passportserializeuser-%ED%8C%8C%ED%8A%B8\" aria-label=\"passportserializeuser 파트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>passport.serializeUser 파트</h5>\n<ol>\n<li>로그인이 성공하면 <code class=\"language-text\">passport.serializeUser</code> 메소드의 콜백 함수가 실행됩니다. </li>\n<li><code class=\"language-text\">done(null, user.authId)</code> 함수가 실행되면 접속한 사용자의 식별 값이 session store에 user.authId로 저장됩니다.</li>\n</ol>\n<h5 id=\"passportdeserializeuser-파트\" style=\"position:relative;\"><a href=\"#passportdeserializeuser-%ED%8C%8C%ED%8A%B8\" aria-label=\"passportdeserializeuser 파트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>passport.deserializeUser 파트</h5>\n<ol>\n<li>로그인 성공한 사용자가 웹 페이지 이동할 때 마다 <code class=\"language-text\">passport.deserializeUser</code> 메소드의 콜백 함수가 호출됩니다.</li>\n<li>authId 인자에는 <code class=\"language-text\">serializeUser</code> 메소드에서 보낸 user.authId 값이 담깁니다.</li>\n<li><code class=\"language-text\">db.query(...)</code> 를 통해서 사용자가 올바르게 로그인 된 상태인지를 확인합니다.</li>\n</ol>\n<h3 id=\"로그아웃\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83\" aria-label=\"로그아웃 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃</h3>\n<p> 로그아웃 파트 라우터 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/logout'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 로그아웃 처리를 하고 session store에 사용자에 대한 정보를 저장 한 뒤, 홈 페이지로 리다이렉트 합니다. </p>","tableOfContents":"<ul>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#%ED%95%84%EC%9A%94%ED%95%9C-%EB%AA%A8%EB%93%88\">필요한 모듈</a></li>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8C%8C%ED%8A%B8\">회원가입 파트</a></li>\n<li>\n<p><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8C%8C%ED%8A%B8\">로그인 파트</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#passportuse-%ED%8C%8C%ED%8A%B8\">passport.use 파트</a></li>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#passportserializeuser-%ED%8C%8C%ED%8A%B8\">passport.serializeUser 파트</a></li>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#passportdeserializeuser-%ED%8C%8C%ED%8A%B8\">passport.deserializeUser 파트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Web/19-07-31-MySQL%EA%B3%BC%20Passport%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EC%9D%B8%EC%A6%9D%EA%B5%AC%ED%98%84/#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83\">로그아웃</a></li>\n</ul>","frontmatter":{"path":"/backend/19-07-31/","title":"MySQL과 Passport를 이용한 인증구현","category":"BackEnd","date":"2019-07-31"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}