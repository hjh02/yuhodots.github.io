{"componentChunkName":"component---src-templates-post-js","path":"/backend/2019-07-04/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>이 글은 ‘오픈튜토리얼스-생활코딩’의 Egoing님의 <a href=\"https://opentutorials.org/course/3411/22097\">강의</a>를 정리했음을 먼저 밝힙니다.</p>\n</blockquote>\n<p> 웹 애플리케이션을 잘 동작하도록 만드는 것도 중요하지만 그보다 더 중요한 것은 내가 만든 웹 애플리케이션을 이용하는 사용자들의 개인정보가 익명의 공격자에 의해 유출되지 않도록 보호하는 것 입니다. 개인정보를 해킹하는 공격 방법은 무수히 다양하지만  그 중 가장 기본적인 bcrypt에 대해서 알아보도록 하겠습니다.  </p>\n<p>사용자의 개인정보를 보호하기 위해서는 익명의 공격자가 사용자의 개인정보를 알아보지 못하도록 암호화 해야합니다. 이 뿐만 아니라, 웹 애플리케이션을 만든 담당 개발자 조차도 사용자들의 개인정보를 알아보지 못하도록 해야합니다. 만약, '111111'이라는 비밀번호를 입력했다고 하면 이 비밀번호는 bcyrpt를 거쳐 '$I1287s72&#x26;829(5+wld' 이런 알아보기 힘든 문자로 암호화 되어 나옵니다. 그렇기 때문에 공격자나 개발자는 이 암호가 무엇을 의미하는지 알아낼 수 없게 됩니다.</p>\n<p> 나중에 사용자가 다시 로그인 하기 위해서 '111111'이라는 비밀번호를 다시 입력하면 이 비밀번호는 bcyrpt를 거쳐 다시 '$I1287s72&#x26;829(5+wld'로 암호화 되어 나오고, 이 정보가 이전의 암호정보와 일치하기 때문에, 개발자가 이 암호의 원래 값이 무엇인지는 몰라도 사용자가 웹 사이트에 로그인 하도록 처리 할 수 있습니다.</p>\n<h3 id=\"bcrypt-적용\" style=\"position:relative;\"><a href=\"#bcrypt-%EC%A0%81%EC%9A%A9\" aria-label=\"bcrypt 적용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bcrypt 적용</h3>\n<p> bcrypt npm이라고 구글에 검색을 하면 <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt npm</a> 라이브러리가 나옵니다. 그럼 그 링크를 클릭해서 bcrypt npm 라이브러리를 설치를 진행합니다. 터미널에서 <code class=\"language-text\">npm install -s bcrypt</code> 명령을 입력하면 설치가 진행됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> temp1 <span class=\"token operator\">=</span> <span class=\"token string\">'s0/\\/\\P4$$w0rD'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> temp2 <span class=\"token operator\">=</span> <span class=\"token string\">'not_bacon'</span><span class=\"token punctuation\">;</span>\n\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">,</span> saltRounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my password'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'other password'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> 위의 코드를 설명하도록 하겠습니다.</p>\n<ul>\n<li><code class=\"language-text\">const bcrypt = require(&#39;bcrypt&#39;)</code>: bcrypt 모듈을 로드합니다.</li>\n<li><code class=\"language-text\">const saltRounds = 10</code>: 공격자가 쉽게 공격 할 수 없도록 노이즈 값을 설정합니다.</li>\n<li><code class=\"language-text\">bcrypt.hash(temp1, saltRounds, function(err, hash) {...}</code>: temp1으로 넣은 비밀번호가 hash라는 값으로 암호화됩니다.</li>\n<li><code class=\"language-text\">bcrypt.compare(temp1, hash, function(err, result) { console.log(&#39;my password&#39;, result); })</code>: true가 출력 됩니다. </li>\n<li><code class=\"language-text\">bcrypt.compare(temp2, hash, function(err, result) { console.log(&#39;my password&#39;, result); })</code>: false가 출력 됩니다.</li>\n</ul>\n<p> 이제 이 내용을 우리의 웹 애플리케이션 로그인 파트에 적용시켜보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> hash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> shortid<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          email<span class=\"token operator\">:</span> email<span class=\"token punctuation\">,</span>\n          password<span class=\"token operator\">:</span> hash<span class=\"token punctuation\">,</span>\n          displayName<span class=\"token operator\">:</span> displayName\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redirect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 password의 value에 진짜 비밀번호가 아닌 hash값을 저장하는 식으로 수정해 주면 됩니다. (위의 코드는 전체 코드의 일부만 떼어 온 것입니다. 첫번째 줄과 다섯번째 줄만 주의해서 확인하면 될 것 같습니다.) </p>","tableOfContents":"<ul>\n<li><a href=\"/Web/19-07-04-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8%20%EC%95%94%ED%98%B8%ED%99%94%20bcrypt/#bcrypt-%EC%A0%81%EC%9A%A9\">bcrypt 적용</a></li>\n</ul>","frontmatter":{"path":"/backend/2019-07-04/","title":"비밀번호 암호화 bcrypt","category":"BackEnd","date":"2019-07-04"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}